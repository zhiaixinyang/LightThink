package com.example.greatbook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greatbook.greendao.entity.ContentCommit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTENT_COMMIT".
*/
public class ContentCommitDao extends AbstractDao<ContentCommit, Long> {

    public static final String TABLENAME = "CONTENT_COMMIT";

    /**
     * Properties of entity ContentCommit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "proid");
        public final static Property EssayId = new Property(1, Long.class, "essayId", false, "ESSAY_ID");
        public final static Property Time = new Property(2, java.util.Date.class, "time", false, "TIME");
        public final static Property CommitTips = new Property(3, String.class, "commitTips", false, "COMMIT_TIPS");
        public final static Property CommitContet = new Property(4, String.class, "commitContet", false, "COMMIT_CONTET");
        public final static Property BelongUserId = new Property(5, String.class, "belongUserId", false, "BELONG_USER_ID");
        public final static Property BelongUserAccount = new Property(6, String.class, "belongUserAccount", false, "BELONG_USER_ACCOUNT");
    };


    public ContentCommitDao(DaoConfig config) {
        super(config);
    }
    
    public ContentCommitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENT_COMMIT\" (" + //
                "\"proid\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ESSAY_ID\" INTEGER," + // 1: essayId
                "\"TIME\" INTEGER," + // 2: time
                "\"COMMIT_TIPS\" TEXT," + // 3: commitTips
                "\"COMMIT_CONTET\" TEXT," + // 4: commitContet
                "\"BELONG_USER_ID\" TEXT," + // 5: belongUserId
                "\"BELONG_USER_ACCOUNT\" TEXT);"); // 6: belongUserAccount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENT_COMMIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContentCommit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long essayId = entity.getEssayId();
        if (essayId != null) {
            stmt.bindLong(2, essayId);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
 
        String commitTips = entity.getCommitTips();
        if (commitTips != null) {
            stmt.bindString(4, commitTips);
        }
 
        String commitContet = entity.getCommitContet();
        if (commitContet != null) {
            stmt.bindString(5, commitContet);
        }
 
        String belongUserId = entity.getBelongUserId();
        if (belongUserId != null) {
            stmt.bindString(6, belongUserId);
        }
 
        String belongUserAccount = entity.getBelongUserAccount();
        if (belongUserAccount != null) {
            stmt.bindString(7, belongUserAccount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContentCommit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long essayId = entity.getEssayId();
        if (essayId != null) {
            stmt.bindLong(2, essayId);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
 
        String commitTips = entity.getCommitTips();
        if (commitTips != null) {
            stmt.bindString(4, commitTips);
        }
 
        String commitContet = entity.getCommitContet();
        if (commitContet != null) {
            stmt.bindString(5, commitContet);
        }
 
        String belongUserId = entity.getBelongUserId();
        if (belongUserId != null) {
            stmt.bindString(6, belongUserId);
        }
 
        String belongUserAccount = entity.getBelongUserAccount();
        if (belongUserAccount != null) {
            stmt.bindString(7, belongUserAccount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContentCommit readEntity(Cursor cursor, int offset) {
        ContentCommit entity = new ContentCommit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // essayId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commitTips
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commitContet
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // belongUserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // belongUserAccount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContentCommit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEssayId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCommitTips(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommitContet(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBelongUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBelongUserAccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContentCommit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContentCommit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
