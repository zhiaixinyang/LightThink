package com.example.greatbook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greatbook.greendao.entity.MyPlanTemplate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_PLAN_TEMPLATE".
*/
public class MyPlanTemplateDao extends AbstractDao<MyPlanTemplate, Long> {

    public static final String TABLENAME = "MY_PLAN_TEMPLATE";

    /**
     * Properties of entity MyPlanTemplate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "proid");
        public final static Property BgColor = new Property(1, int.class, "bgColor", false, "BG_COLOR");
        public final static Property TextColor = new Property(2, int.class, "textColor", false, "TEXT_COLOR");
        public final static Property DetailColor = new Property(3, int.class, "detailColor", false, "DETAIL_COLOR");
        public final static Property TextSize = new Property(4, int.class, "textSize", false, "TEXT_SIZE");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
    };


    public MyPlanTemplateDao(DaoConfig config) {
        super(config);
    }
    
    public MyPlanTemplateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_PLAN_TEMPLATE\" (" + //
                "\"proid\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BG_COLOR\" INTEGER NOT NULL ," + // 1: bgColor
                "\"TEXT_COLOR\" INTEGER NOT NULL ," + // 2: textColor
                "\"DETAIL_COLOR\" INTEGER NOT NULL ," + // 3: detailColor
                "\"TEXT_SIZE\" INTEGER NOT NULL ," + // 4: textSize
                "\"CONTENT\" TEXT);"); // 5: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_PLAN_TEMPLATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyPlanTemplate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBgColor());
        stmt.bindLong(3, entity.getTextColor());
        stmt.bindLong(4, entity.getDetailColor());
        stmt.bindLong(5, entity.getTextSize());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyPlanTemplate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBgColor());
        stmt.bindLong(3, entity.getTextColor());
        stmt.bindLong(4, entity.getDetailColor());
        stmt.bindLong(5, entity.getTextSize());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyPlanTemplate readEntity(Cursor cursor, int offset) {
        MyPlanTemplate entity = new MyPlanTemplate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // bgColor
            cursor.getInt(offset + 2), // textColor
            cursor.getInt(offset + 3), // detailColor
            cursor.getInt(offset + 4), // textSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyPlanTemplate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBgColor(cursor.getInt(offset + 1));
        entity.setTextColor(cursor.getInt(offset + 2));
        entity.setDetailColor(cursor.getInt(offset + 3));
        entity.setTextSize(cursor.getInt(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyPlanTemplate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyPlanTemplate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
