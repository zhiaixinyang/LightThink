package com.example.greatbook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greatbook.greendao.entity.LocalRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_RECORD".
*/
public class LocalRecordDao extends AbstractDao<LocalRecord, Long> {

    public static final String TABLENAME = "LOCAL_RECORD";

    /**
     * Properties of entity LocalRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "proid");
        public final static Property TimeDate = new Property(1, java.util.Date.class, "timeDate", false, "TIME_DATE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property BelongId = new Property(4, String.class, "belongId", false, "BELONG_ID");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property GroupId = new Property(6, Long.class, "groupId", false, "GROUP_ID");
        public final static Property GroupTitle = new Property(7, String.class, "groupTitle", false, "GROUP_TITLE");
    };


    public LocalRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LocalRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_RECORD\" (" + //
                "\"proid\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME_DATE\" INTEGER," + // 1: timeDate
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"BELONG_ID\" TEXT," + // 4: belongId
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"GROUP_ID\" INTEGER," + // 6: groupId
                "\"GROUP_TITLE\" TEXT);"); // 7: groupTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date timeDate = entity.getTimeDate();
        if (timeDate != null) {
            stmt.bindLong(2, timeDate.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String belongId = entity.getBelongId();
        if (belongId != null) {
            stmt.bindString(5, belongId);
        }
        stmt.bindLong(6, entity.getType());
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(7, groupId);
        }
 
        String groupTitle = entity.getGroupTitle();
        if (groupTitle != null) {
            stmt.bindString(8, groupTitle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date timeDate = entity.getTimeDate();
        if (timeDate != null) {
            stmt.bindLong(2, timeDate.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String belongId = entity.getBelongId();
        if (belongId != null) {
            stmt.bindString(5, belongId);
        }
        stmt.bindLong(6, entity.getType());
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(7, groupId);
        }
 
        String groupTitle = entity.getGroupTitle();
        if (groupTitle != null) {
            stmt.bindString(8, groupTitle);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalRecord readEntity(Cursor cursor, int offset) {
        LocalRecord entity = new LocalRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // timeDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // belongId
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // groupId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // groupTitle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBelongId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setGroupId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGroupTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
